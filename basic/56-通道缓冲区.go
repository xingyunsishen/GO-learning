/*
通道缓冲区，通过make的第二个参数指定缓冲区大小
ch := make(chan int, 100)
带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送
端发送的数据可以放在缓冲区里面，可以等接收端区获取数据，而不是立刻需要接收端
区获取数据。
不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。
注意：如果通道不带缓冲区，发送方会阻塞知道接收方从通道中接收了值。如果通道带缓冲区，发送方则会阻塞直到发送的值拷贝到缓冲区内；如果缓冲器已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。
*/
package main

import "fmt"

func main() {
  //这里我们定义了一个可以存储整数类型的带缓冲通道
    //缓冲区大小为2
    ch := make(chan int, 2)

    // 因为ch是带缓冲区的通道，我们可以同时发送两个数据
    //而不用立刻需要区同步读数据
    ch <- 1
    ch <- 2

    //获取这两个数据
    fmt.Println(<-ch)
    fmt.Println(<-ch)
}
